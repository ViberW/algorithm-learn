package com.welph.leecode.part_1_500.part_121_140;

/**
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。
 * 说明：
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 * 示例 1:
 * 输入: [2,2,3,2]
 * 输出: 3
 * 示例2:
 * <p>
 * 输入: [0,1,0,1,0,1,99]
 * 输出: 99
 */
public class Solution137 {

    public static void main(String[] args) {
        int[] nums = {0, 1, 0, 1, 0, 1, 99};
        System.out.println(singleNumber(nums));
    }

    /**
     * 从{@link Solution136} todo 位运算 值得回味
     * -- 巧妙 使用两个值保存
     * 0 ^ x = x,
     * x ^ x = 0；
     * x & ~x = 0,
     * x & ~0 =x;
     * ------------------------------------------------
     * 思路分析: 若使得一个数出现3次时能自动抵消为0,最后剩下的就是出现一次的
     * 由于一个二进制位表示0或1, 则能够记录出现1次或两次
     * x^0=x
     * x^x=0
     * 若需要记录3次, 则需要两个二进制位,使用两个变量,各取一位
     * ab^00=ab
     * ab^ab=00
     * ==========> a的第k位与b的第k位表示当前位出现的次数
     * 例如 x = x[7] x[6] ... x[1] x[0]  一个8位的二进制表示
     * => x= (a[7]b[7]) (a[6]b[6]) ... (a[0]b[0])
     * 相同位置上取一位, 完成 00 -> 01 -> 10 -> 00
     */
    public static int singleNumber(int[] nums) {
        int a = 0;  //用于保存额外多出来的一值
        int b = 0;  //目标值
        for (int num : nums) {
            /*
             * 理解.这里不用关注整体值, 仅关注一个位即可
             * 最初 a=0 b=0 
             * 第一次遇见1 (01): b = (0^num[k])&~0 = 1   a = (0^num[k])&~1 = 0
             * 第二次遇见1 (10): b = (1^num[k])&~0 = 0   a = (0^num[k])&~0 = 1
             * 第三次遇见1 (00): b = (0^num[k])&~1 = 0   a = (1^num[k])&~1 = 0
             * -----tips: 这里~0=1  ~1=0
             */
            b = (b ^ num) & ~a; 
            a = (a ^ num) & ~b;
        }
        return b;
    }
}
